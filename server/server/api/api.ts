/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/blogs': {
    /** Get all blogs */
    get: {
      responses: {
        /** @description A list of blogs */
        200: {
          content: never;
        };
      };
    };
    /** Create a new blog */
    post: {
      requestBody: {
        content: {
          'application/json': components['schemas']['BlogInput'];
        };
      };
      responses: {
        /** @description Blog created successfully */
        201: {
          content: never;
        };
        /** @description Invalid request body */
        400: {
          content: never;
        };
      };
    };
  };
  '/api/blogs/{blogId}': {
    /** Get a specific blog by ID */
    get: {
      parameters: {
        path: {
          /** @description ID of the blog to get */
          blogId: string;
        };
      };
      responses: {
        /** @description A blog object */
        200: {
          content: never;
        };
        /** @description Blog not found */
        404: {
          content: never;
        };
      };
    };
    /** Update a blog */
    put: {
      parameters: {
        path: {
          /** @description ID of the blog to update */
          blogId: string;
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['BlogInput'];
        };
      };
      responses: {
        /** @description Blog updated successfully */
        200: {
          content: never;
        };
        /** @description Invalid request body */
        400: {
          content: never;
        };
        /** @description Blog not found */
        404: {
          content: never;
        };
      };
    };
    /** Delete a blog */
    delete: {
      parameters: {
        path: {
          /** @description ID of the blog to delete */
          blogId: string;
        };
      };
      responses: {
        /** @description Blog deleted successfully */
        204: {
          content: never;
        };
        /** @description Blog not found */
        404: {
          content: never;
        };
      };
    };
  };
  '/api/blogs/{blogId}/posts': {
    /** Get all posts of a specific blog */
    get: {
      parameters: {
        path: {
          /** @description ID of the blog */
          blogId: string;
        };
      };
      responses: {
        /** @description A list of posts */
        200: {
          content: never;
        };
        /** @description Blog not found */
        404: {
          content: never;
        };
      };
    };
  };
  '/api/blogs/{blogId}/posts/{postId}': {
    /** Update a post */
    put: {
      parameters: {
        path: {
          /** @description ID of the blog containing the post */
          blogId: string;
          /** @description ID of the post to update */
          postId: string;
        };
      };
      requestBody: {
        content: {
          'application/json': components['schemas']['Post'];
        };
      };
      responses: {
        /** @description Post updated successfully */
        200: {
          content: never;
        };
        /** @description Invalid request body */
        400: {
          content: never;
        };
        /** @description Blog or post not found */
        404: {
          content: never;
        };
      };
    };
    /** Delete a post */
    delete: {
      parameters: {
        path: {
          /** @description ID of the blog containing the post */
          blogId: string;
          /** @description ID of the post to delete */
          postId: string;
        };
      };
      responses: {
        /** @description Post deleted successfully */
        204: {
          content: never;
        };
        /** @description Blog or post not found */
        404: {
          content: never;
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    BlogInput: {
      /** @description Title of the blog */
      title?: string;
    };
    Post: {
      /** @description Title of the post */
      title?: string;
      /** @description Content of the post */
      content?: string;
      /** @description ID of the user who created the post */
      userId?: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
